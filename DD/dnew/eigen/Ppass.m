function [p] = Ppass(n,m,wp1,wp2,w0)
%Ppass	function to calculate the n,mth element of the Ppassband matrix
%	for the Eigenfilter P matrix 
%	wp1 and wp2 are assumed to be normalized w.r.t pi
%	it can be thought of as the integral FROM wp1 TO wp2
%	w0 is the center frequency of the passband

wp1 = wp1*pi;
wp2 = wp2*pi;
w0  = w0*pi;

if (n == 0 | m == 0)
 p=0.0;
elseif (n == m)
 p =	((cos(n*w0)^2)*n*wp2 - 2*cos(n*w0)*sin(n*wp2) + ...
	0.5*cos(n*wp2)*sin(n*wp2) + 0.5*n*wp2)/n ...
   -	((cos(n*w0)^2)*n*wp1 - 2*cos(n*w0)*sin(n*wp1) + ...
	0.5*cos(n*wp1)*sin(n*wp1) + 0.5*n*wp1)/n;
else
 p =	(0.5*cos(n*w0-m*w0)*wp2 + 0.5*cos(n*w0+m*w0)*wp2  ...
	+ 0.5*(sin(n*w0-m*wp2)/m) - 0.5*(sin(n*w0+m*wp2)/m) ...
	- 0.5*(sin(n*wp2-m*w0)/n) - 0.5*(sin(n*wp2+m*w0)/n) ...
	+ 0.5*(sin(n*wp2-m*wp2)/(n-m)) + 0.5*(sin(n*wp2+m*wp2)/(n+m))) ...
   - ...
	(0.5*cos(n*w0-m*w0)*wp1 + 0.5*cos(n*w0+m*w0)*wp1  ...
	+ 0.5*(sin(n*w0-m*wp1)/m) - 0.5*(sin(n*w0+m*wp1)/m) ...
	- 0.5*(sin(n*wp1-m*w0)/n) - 0.5*(sin(n*wp1+m*w0)/n) ...
	+ 0.5*(sin(n*wp1-m*wp1)/(n-m)) + 0.5*(sin(n*wp1+m*wp1)/(n+m)));

end

